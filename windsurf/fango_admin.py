#!/usr/bin/env python3

import os
import sys
import argparse
import shutil
from pathlib import Path
from datetime import datetime


class FangoAdmin:
    """
    Main class for the Fango admin utility, providing scaffolding functionality
    similar to django-admin.
    """

    def __init__(self):
        self.parser = argparse.ArgumentParser(
            description="Fango admin utility for project scaffolding"
        )
        self.setup_parser()

    def setup_parser(self):
        subparsers = self.parser.add_subparsers(dest="command", help="Commands")
        
        # Create project command
        create_project = subparsers.add_parser(
            "create-project", help="Create a new Fango project"
        )
        create_project.add_argument("name", help="Name of the project")
        
        # Create app command
        create_app = subparsers.add_parser(
            "create-app", help="Create a new Fango app"
        )
        create_app.add_argument("name", help="Name of the app")

    def run(self):
        args = self.parser.parse_args()
        
        if args.command == "create-project":
            self.create_project(args.name)
        elif args.command == "create-app":
            self.create_app(args.name)
        else:
            self.parser.print_help()

    def create_project(self, name):
        """
        Create a new Fango project with the given name.
        """
        print(f"Creating Fango project '{name}'...")
        
        # Create project directory
        os.makedirs(name, exist_ok=True)
        
        # Create project package directory
        os.makedirs(os.path.join(name, name), exist_ok=True)
        
        # Create __init__.py
        with open(os.path.join(name, name, "__init__.py"), "w") as f:
            f.write("")
        
        # Create settings.py
        with open(os.path.join(name, name, "settings.py"), "w") as f:
            f.write(self.get_settings_template(name))
        
        # Create urls.py
        with open(os.path.join(name, name, "urls.py"), "w") as f:
            f.write(self.get_urls_template(name))
        
        # Create asgi.py
        with open(os.path.join(name, name, "asgi.py"), "w") as f:
            f.write(self.get_asgi_template(name))
        
        # Create manage.py
        with open(os.path.join(name, "manage.py"), "w") as f:
            f.write(self.get_manage_template(name))
        os.chmod(os.path.join(name, "manage.py"), 0o755)  # Make executable
        
        # Create requirements.txt
        with open(os.path.join(name, "requirements.txt"), "w") as f:
            f.write(self.get_requirements_template())
        
        print(f"Fango project '{name}' created successfully!")
        print(f"\nTo run your project:")
        print(f"  cd {name}")
        print(f"  pip install -r requirements.txt")
        print(f"  python manage.py runserver")

    def create_app(self, name):
        """
        Create a new Fango app with the given name.
        """
        print(f"Creating Fango app '{name}'...")
        
        # Check if we're inside a Fango project
        if not os.path.exists("manage.py"):
            print("Error: Not inside a Fango project. Please run this command from the project root.")
            sys.exit(1)
        
        # Create app directory
        os.makedirs(name, exist_ok=True)
        
        # Create app files
        with open(os.path.join(name, "__init__.py"), "w") as f:
            f.write("")
        
        with open(os.path.join(name, "models.py"), "w") as f:
            f.write(self.get_models_template(name))
        
        with open(os.path.join(name, "views.py"), "w") as f:
            f.write(self.get_views_template(name))
        
        with open(os.path.join(name, "schemas.py"), "w") as f:
            f.write(self.get_schemas_template(name))
        
        with open(os.path.join(name, "urls.py"), "w") as f:
            f.write(self.get_app_urls_template(name))
        
        print(f"Fango app '{name}' created successfully!")
        print(f"\nRemember to include your app in the project's settings.py and urls.py")

    # Template generators
    def get_settings_template(self, project_name):
        return f'''"""
Fango settings for {project_name} project.

Generated by 'fango-admin create-project' on {datetime.now().strftime('%Y-%m-%d')}.
"""

import os
from pathlib import Path

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-change-this-in-production"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    # Fango apps
    
    # Third party apps
    
    # Local apps
]

MIDDLEWARE = [
    "fastapi.middleware.cors.CORSMiddleware",
]

ROOT_URLCONF = "{project_name}.urls"

TEMPLATES = [
    {{
        "BACKEND": "fango.template.backends.jinja2.Jinja2",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {{
            "context_processors": [
                "{project_name}.context_processors.settings",
            ],
        }},
    }},
]

WSGI_APPLICATION = "{project_name}.asgi.application"

# Database
DATABASES = {{
    "default": {{
        "ENGINE": "sqlalchemy",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }}
}}

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
'''

    def get_urls_template(self, project_name):
        return f'''"""
URL Configuration for {project_name} project.

Generated by 'fango-admin create-project' on {datetime.now().strftime('%Y-%m-%d')}.
"""

from fastapi import APIRouter

# Create the main router
router = APIRouter()

# Import and include app routers here
# Example: router.include_router(myapp.urls.router, prefix="/myapp")

# Add your API routes here
@router.get("/")
async def index():
    return {{
        "message": "Welcome to Fango Framework",
        "status": "API is running"
    }}
'''

    def get_asgi_template(self, project_name):
        return f'''"""
ASGI config for {project_name} project.

Generated by 'fango-admin create-project' on {datetime.now().strftime('%Y-%m-%d')}.
"""

import os
import sys
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Import settings module
os.environ.setdefault("FANGO_SETTINGS_MODULE", "{project_name}.settings")

from fastapi import FastAPI
from {project_name}.urls import router

# Create FastAPI application
app = FastAPI(
    title="{project_name.capitalize()} API",
    description="API for {project_name.capitalize()} project",
    version="0.1.0",
)

# Include the main router
app.include_router(router)

# For ASGI servers like Uvicorn
application = app
'''

    def get_manage_template(self, project_name):
        return f'''#!/usr/bin/env python
"""
Fango's command-line utility for administrative tasks.

Generated by 'fango-admin create-project' on {datetime.now().strftime('%Y-%m-%d')}.
"""

import os
import sys
import uvicorn
import argparse
from pathlib import Path


def main():
    """Run administrative tasks."""
    os.environ.setdefault("FANGO_SETTINGS_MODULE", "{project_name}.settings")
    
    parser = argparse.ArgumentParser(description="Fango management utility")
    subparsers = parser.add_subparsers(dest="command", help="Commands")
    
    # runserver command
    runserver = subparsers.add_parser("runserver", help="Run the development server")
    runserver.add_argument("--host", default="127.0.0.1", help="Host to run the server on")
    runserver.add_argument("--port", type=int, default=8000, help="Port to run the server on")
    runserver.add_argument("--reload", action="store_true", help="Auto-reload on code changes")
    
    # shell command
    shell = subparsers.add_parser("shell", help="Run an interactive Python shell")
    
    # Parse arguments
    args = parser.parse_args()
    
    if args.command == "runserver":
        print(f"Starting development server at http://{{args.host}}:{{args.port}}/")
        uvicorn.run(
            "{project_name}.asgi:app",
            host=args.host,
            port=args.port,
            reload=args.reload
        )
    elif args.command == "shell":
        try:
            import IPython
            IPython.start_ipython(argv=[])
        except ImportError:
            import code
            code.interact(local=globals())
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
'''

    def get_models_template(self, app_name):
        return f'''"""
Models for {app_name} app.

Generated by 'fango-admin create-app' on {datetime.now().strftime('%Y-%m-%d')}.
"""

from sqlalchemy import Column, Integer, String, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func

Base = declarative_base()

# Define your models here
# Example:
# class Item(Base):
#     __tablename__ = "{app_name}_items"
#
#     id = Column(Integer, primary_key=True, index=True)
#     name = Column(String, index=True)
#     description = Column(String)
#     created_at = Column(DateTime(timezone=True), server_default=func.now())
#     updated_at = Column(DateTime(timezone=True), onupdate=func.now())
'''

    def get_views_template(self, app_name):
        return f'''"""
Views for {app_name} app.

Generated by 'fango-admin create-app' on {datetime.now().strftime('%Y-%m-%d')}.
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from . import models, schemas

# Define your views (API endpoints) here
# Example:
# def get_items(db: Session = Depends(get_db)):
#     return db.query(models.Item).all()
#
# def create_item(item: schemas.ItemCreate, db: Session = Depends(get_db)):
#     db_item = models.Item(**item.dict())
#     db.add(db_item)
#     db.commit()
#     db.refresh(db_item)
#     return db_item
'''

    def get_schemas_template(self, app_name):
        return f'''"""
Pydantic schemas for {app_name} app.

Generated by 'fango-admin create-app' on {datetime.now().strftime('%Y-%m-%d')}.
"""

from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel

# Define your Pydantic models (schemas) here
# Example:
# class ItemBase(BaseModel):
#     name: str
#     description: Optional[str] = None
#
# class ItemCreate(ItemBase):
#     pass
#
# class Item(ItemBase):
#     id: int
#     created_at: datetime
#     updated_at: Optional[datetime] = None
#
#     class Config:
#         orm_mode = True
'''

    def get_app_urls_template(self, app_name):
        return f'''"""
URL Configuration for {app_name} app.

Generated by 'fango-admin create-app' on {datetime.now().strftime('%Y-%m-%d')}.
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from . import views

# Create the router for this app
router = APIRouter(
    prefix="/{app_name}",
    tags=["{app_name}"],
)

# Add your API routes here
# Example:
# @router.get("/items/", response_model=List[schemas.Item])
# def read_items(db: Session = Depends(get_db)):
#     return views.get_items(db)
#
# @router.post("/items/", response_model=schemas.Item)
# def create_item(item: schemas.ItemCreate, db: Session = Depends(get_db)):
#     return views.create_item(item, db)
'''

    def get_requirements_template(self):
        return '''
# Core dependencies
fastapi>=0.95.0
uvicorn>=0.21.0
pydantic>=1.10.7

# Database
sqlalchemy>=2.0.9
alembic>=1.10.3

# Templates
jinja2>=3.1.2

# Development
ipython>=8.12.0
python-dotenv>=1.0.0
'''


def main():
    admin = FangoAdmin()
    admin.run()


if __name__ == "__main__":
    main()
